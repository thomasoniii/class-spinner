{"version":3,"sources":["actions/spinners.js","actions/classrooms.js","actions/index.js","selectors/spinners.js","utils.js","selectors/classrooms.js","components/select-spinner.js","components/classroom-selector.js","components/spinner-details.js","components/edit-classroom.js","components/spinner.js","components/edit-spinner.js","components/edit-spinners.js","components/spinner-grid.js","components/classroom.js","components/classroom-grid.js","App.js","serviceWorker.js","reducers/spinners.js","reducers/classrooms.js","reducers/index.js","index.js","saving-middleware.js"],"names":["ADD_SPINNER","SELECT_SPINNER","RENAME_SPINNER","DELETE_SPINNER","SET_SCHEME","addSpinner","dispatch","id","pushid","type","payload","selectSpinner","renameSpinner","name","setScheme","scheme","deleteSpinner","ADD_CLASSROOM","DELETE_CLASSROOM","SELECT_CLASSROOM","RENAME_CLASSROOM","SET_ROSTER","SET_STUDENT_STATUS","RESET_SPINNER","addClassroom","a","selectClassroom","deleteClassroom","renameClassroom","setRoster","roster","setStudentStatus","spinnerId","studentName","status","resetSpinner","resetSuspensions","INITIALIZE_STORE","initializeStore","json","window","localStorage","setItem","location","reload","getSelectedSpinner","createSelector","state","spinners","Object","values","find","spinner","selected","sortByClassroomName","b","localeCompare","getClassrooms","classrooms","getSelectedClassroom","room","sort","SelectSpinner","props","selectedSpinnerId","keys","label","outlined","options","map","value","onChange","e","target","ClassroomSelector","classroom","selectedClassroomId","classroomId","spinnerStatus","rosterStatus","kid","row","undefined","stickyRows","key","updateStatus","connect","selectedClassroom","selectedSpinner","actions","React","useState","open","setOpen","onClose","evt","detail","action","isDefaultAction","className","icon","disabled","onClick","fullWidth","textarea","fullwidth","rows","join","split","availableSchemes","entries","colorbrewer","reduce","available","set","pop","heightForAngle","angle","outerRadius","radians","Math","PI","tan","spin","setSpin","winner","setWinner","kids","i","color","innerRadius","colors","wedgeAngle","length","viewBox","xmlns","cx","cy","r","style","transformOrigin","fill","clipPath","transform","d","stroke","strokeWidth","x","y","textAnchor","alignmentBaseline","renderKidName","canSpin","backgroundColor","confirm","theme","setTimeout","lastWinner","winnableKids","filter","floor","random","kidIndex","findIndex","movableKids","splice","push","pickWinner","spinnerID","text","activated","modal","autoDetectWindowHeight","autoScrollBodyContent","history","useHistory","serializedState","JSON","stringify","importOpen","setImportOpen","temporaryState","setTemporaryState","parse","console","log","fixed","title","navigationIcon","raised","exact","path","Boolean","hostname","match","INITIAL","combineReducers","selectedID","newState","nextSelectionIdx","nextSelectionId","anyoneAvailable","some","includes","oldStatuses","newStatuses","newSpinners","preloadedState","getItem","store","createStore","reducers","composeWithDevTools","applyMiddleware","reduxThunk","next","result","getState","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.893df559.chunk.js","sourcesContent":["import pushid from \"pushid\"\n\nexport const ADD_SPINNER = \"ADD_SPINNER\"\nexport const SELECT_SPINNER = \"SELECT_SPINNER\"\nexport const RENAME_SPINNER = \"RENAME_SPINNER\"\nexport const DELETE_SPINNER = \"DELETE_SPINNER\"\nexport const SET_SCHEME = \"SET_SCHEME\"\n\nexport function addSpinner() {\n  return dispatch => {\n    const id = pushid()\n    dispatch( { type : ADD_SPINNER, payload : { id } } )\n    dispatch( selectSpinner(id) )\n  }\n}\n\nexport function selectSpinner(id) {\n  return {\n    type : SELECT_SPINNER,\n    payload : { id }\n  }\n}\n\nexport function renameSpinner(id, name) {\n  return {\n    type : RENAME_SPINNER,\n    payload : { id, name }\n  }\n}\n\nexport function setScheme(id, scheme) {\n  return {\n    type : SET_SCHEME,\n    payload : { id, scheme }\n  }\n}\n\nexport function deleteSpinner(id) {\n  return {\n    type : DELETE_SPINNER,\n    payload : { id }\n  }\n}\n","import pushid from \"pushid\"\n\nexport const ADD_CLASSROOM = \"ADD_CLASSROOM\"\nexport const DELETE_CLASSROOM = \"DELETE_CLASSROOM\"\nexport const SELECT_CLASSROOM = \"SELECT_CLASSROOM\"\nexport const RENAME_CLASSROOM = \"RENAME_CLASSROOM\"\nexport const SET_ROSTER = \"SET_ROSTER\"\nexport const SET_STUDENT_STATUS = \"SET_STUDENT_STATUS\"\nexport const RESET_SPINNER = \"RESET_SPINNER\"\n\nexport const addClassroom = ( id = pushid() ) => {\n  return async dispatch => {\n    await dispatch( { type : ADD_CLASSROOM, payload : { id } } )\n    await dispatch( selectClassroom(id) )\n  }\n}\n\nexport const deleteClassroom = (id) => {\n  return {\n    type : DELETE_CLASSROOM,\n    payload : {id}\n  }\n}\n\nexport const selectClassroom = (id) => {\n  return {\n    type : SELECT_CLASSROOM,\n    payload : { id }\n  }\n}\n\nexport const renameClassroom = (id, name) => {\n  return {\n    type : RENAME_CLASSROOM,\n    payload : { id, name }\n  }\n}\n\nexport const setRoster = (id, roster) => {\n  return {\n    type : SET_ROSTER,\n    payload : { id, roster }\n  }\n}\n\nexport const setStudentStatus = (id, spinnerId, studentName, status) => {\n  return {\n    type : SET_STUDENT_STATUS,\n    payload : { id, spinnerId, studentName, status }\n  }\n}\n\nexport const resetSpinner = (id, spinnerId, resetSuspensions = true) => {\n  return {\n    type : RESET_SPINNER,\n    payload : { id, spinnerId, resetSuspensions }\n  }\n}\n","export * from \"./spinners\"\nexport * from \"./classrooms\"\n\nexport const INITIALIZE_STORE = \"INITIALIZE_STORE\"\n\nexport const initializeStore = (json) => {\n  window.localStorage.setItem(\"spinner\", json)\n  window.location.reload()\n}\n","import { createSelector } from 'reselect';\n\nexport const getSpinners = (state) => state.spinners\n\nexport const getSelectedSpinner = createSelector(\n  [getSpinners],\n  spinners => {\n    return Object.values(spinners).find( spinner => spinner.selected )\n  }\n)\n","export const sortByClassroomName = (a,b) => {\n  return a.name.localeCompare(b.name)\n}\n\nfunction decToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction hexToDec(c) {\n  return parseInt(c, 16)\n}\n\nexport const invertColor = (color) => {\n  const rgb = color.match(/#(..)(..)(..)/)\n  if (rgb) {\n    rgb.shift()\n\n    const [x,y,z] = rgb.map(c => hexToDec(c))\n\n    console.log(x, 255 -x , y, 255 - y, z, 255 - z)\n\n    const [r, g, b] = rgb\n      .map(c => hexToDec(c))\n      .map(c => decToHex(255 - c))\n    console.log(r,g,b)\n    return [\"#\", r,g,b].join(\"\")\n  }\n  else {\n    return \"black\"\n  }\n\n}\n","import { createSelector } from 'reselect';\nimport { sortByClassroomName } from \"utils\"\n\nexport const getClassrooms = (state) => state.classrooms\n\nexport const getSelectedClassroom = createSelector(\n  [getClassrooms],\n  classrooms => {\n    return Object.values(classrooms).find( room => room.selected )\n  }\n)\n\nexport const getSortedClassrooms = createSelector(\n  [getClassrooms],\n  classrooms => Object.values(classrooms).sort(sortByClassroomName)\n)\n","import React from \"react\"\nimport { Select } from \"@rmwc/select\"\n\nimport '@material/select/dist/mdc.select.css';\n\nconst SelectSpinner = (props) => {\n\n  const selectedSpinnerId = Object.keys(props.spinners).find( spinnerId => props.spinners[spinnerId].selected === true)\n\n  return (<Select\n    label=\"Select spinner\"\n    outlined\n    options={ Object.values(props.spinners).map( spinner => ({ value : spinner.id, label : spinner.name }) ) }\n    value = { selectedSpinnerId }\n    onChange={ e => props.selectSpinner(e.target.value) }\n  />)\n}\n\nexport default SelectSpinner\n","import React from \"react\"\nimport { Select } from \"@rmwc/select\"\nimport { sortByClassroomName } from \"utils\"\n\nimport '@material/select/dist/mdc.select.css';\n\nconst ClassroomSelector = (props) => {\n\n  const options = Object.values(props.classrooms).sort(sortByClassroomName).map( classroom => ({ value : classroom.id, label : classroom.name }) )\n  const selectedClassroomId = Object.keys(props.classrooms).find( classroomId => props.classrooms[classroomId].selected === true)\n\n  return (<Select\n    label=\"Select classroom\"\n    outlined\n    options={ options }\n    value = { selectedClassroomId }\n    onChange={ e => {\n      props.selectClassroom(e.target.value)\n    }}\n  />)\n}\n\nexport default ClassroomSelector\n","import React from \"react\"\n\nimport { DataTable, DataTableContent, DataTableHead, DataTableRow, DataTableHeadCell, DataTableBody, DataTableCell } from \"@rmwc/data-table\"\nimport { Select } from \"@rmwc/select\"\n\nimport '@material/select/dist/mdc.select.css';\nimport '@rmwc/data-table/data-table.css'\n\nexport default props => {\n\n  const { classroom, spinner } = props\n\n  const spinnerStatus = classroom.spinners[spinner.id] || {}\n  const rosterStatus = classroom.roster.map( kid => {\n    const row = { kid }\n    if (spinnerStatus[kid] !== undefined) {\n      row.status = spinnerStatus[kid]\n    }\n    else {\n      row.status = \"Available\"\n    }\n    return row\n  })\n\n  return (\n    <DataTable\n      stickyRows={1}\n      >\n      <DataTableContent>\n        <DataTableHead>\n          <DataTableRow>\n            <DataTableHeadCell>Student</DataTableHeadCell>\n            <DataTableHeadCell>\n              Status\n            </DataTableHeadCell>\n          </DataTableRow>\n        </DataTableHead>\n        <DataTableBody>\n          { rosterStatus.map( row =>\n            <DataTableRow key={row.kid}>\n              <DataTableCell>{ row.kid }</DataTableCell>\n              <DataTableCell>\n                <Select\n                  options={ [\"Available\", \"Picked\", \"Suspended\"] }\n                  value = { row.status }\n                  onChange={ e => props.updateStatus(classroom.id, spinner.id, row.kid, e.target.value) }\n                />\n              </DataTableCell>\n            </DataTableRow>\n          )}\n        </DataTableBody>\n      </DataTableContent>\n    </DataTable>\n  )\n}\n","import React, {Fragment} from \"react\"\nimport { connect } from \"react-redux\"\nimport { TextField } from \"@rmwc/textfield\"\nimport { IconButton } from \"@rmwc/icon-button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\n\nimport * as actions from \"actions\"\nimport { getSelectedClassroom, getSelectedSpinner } from \"selectors\"\n\nimport SelectSpinner from \"./select-spinner\"\nimport ClassroomSelector from \"./classroom-selector\"\nimport SpinnerDetails from \"./spinner-details\"\n\nimport \"styles/edit-classroom.css\"\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst EditClassroom = (props) => {\n  const {\n    renameClassroom,\n    setRoster,\n    classrooms,\n    addClassroom,\n    deleteClassroom,\n    selectClassroom,\n    selectedClassroom = {},\n    spinners,\n    selectedSpinner,\n    selectSpinner,\n\n    setStudentStatus\n  } = props\n\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Fragment>\n      <Dialog\n        open={open}\n        onClose={evt => {\n          setOpen(false)\n          if (evt.detail.action === \"accept\") {\n            deleteClassroom(selectedClassroom.id)\n          }\n        }}\n      >\n        <DialogTitle>Import/Export Data</DialogTitle>\n        <DialogContent>Really delete {selectedClassroom.name}?</DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Delete\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <div className=\"edit-classroom-container\">\n\n        <div className=\"classroom-selector\">\n          <span className='dropdown'><ClassroomSelector\n            classrooms={classrooms}\n            addClassroom={addClassroom}\n            selectClassroom={selectClassroom}\n          />\n          </span>\n          <span className='buttons'>\n            <IconButton\n              icon=\"remove_circle\"\n              disabled={ selectedClassroom.id === undefined }\n              onClick={() => setOpen(true)}\n            />\n            <IconButton icon=\"add_circle\" onClick={() => addClassroom()} />\n          </span>\n\n      </div>\n\n        <TextField\n          fullWidth\n          className=\"classroom-name\"\n          outlined\n          label=\"Classroom\"\n          value={selectedClassroom.name || \"\"}\n          onChange={ e => renameClassroom(selectedClassroom.id, e.target.value) }\n        />\n\n        <TextField\n          className=\"classroom-list\"\n          textarea\n          outlined\n          fullwidth\n          label=\"Students\"\n          rows={8}\n          value={(selectedClassroom.roster || []).join(\"\\n\")}\n          onChange={ e => setRoster(selectedClassroom.id, e.target.value.split(/\\r?\\n/)) }\n        />\n\n        <div className=\"spinner-selector\">\n          <SelectSpinner\n            spinners={spinners}\n            selectedSpinner={selectedSpinner}\n            selectSpinner={selectSpinner}/>\n        </div>\n        <div className=\"spinner-details\">\n          { selectedClassroom.id && selectedSpinner && <SpinnerDetails\n            classroom={selectedClassroom}\n            spinner={selectedSpinner}\n            updateStatus={setStudentStatus}\n          /> }\n        </div>\n\n      </div>\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    selectedClassroom : getSelectedClassroom(state),\n    classrooms : state.classrooms,\n    selectedSpinner : getSelectedSpinner(state),\n    spinners : state.spinners\n  }\n}\n\nexport default connect(mapStateToProps, actions)(EditClassroom)\n","import React, {useState} from \"react\"\nimport colorbrewer from \"colorbrewer\"\nimport {Fab} from \"@rmwc/fab\"\n\nimport { invertColor } from \"utils\"\n\nimport \"styles/spinner.css\"\n\nconst availableSchemes = Object.entries(colorbrewer).reduce( (available, [key, set]) => {\n  if (key !== \"schemeGroups\") {\n    available[key] = set[Object.keys(set).sort().pop()]\n  }\n  return available\n}, {} )\n\nconst pickWinner = ( kids, classroom, spinner, setRoster, setStudentStatus, setWinner, resetSpinner ) => {\n\n  const lastWinner = kids.find(kid => kid.winner)\n  if (lastWinner) {\n    setStudentStatus(classroom.id, spinner.id, lastWinner.name, \"Picked\")\n    lastWinner.status = \"Picked\";\n  }\n\n  const winnableKids = kids.filter( kid => kid.status === \"Available\" )\n\n  if (winnableKids.length === 0) {\n    resetSpinner(classroom.id, spinner.id, false)\n    return\n  }\n\n  const winnerIndex = Math.floor(Math.random() * winnableKids.length)\n  const winner = winnableKids[winnerIndex]\n\n  const kidIndex = kids.findIndex(kid => kid === winner)\n  setWinner(winner.name)\n\n  if (kidIndex > 0) {\n    const movableKids = kids.splice(0, kidIndex)\n    kids.push(...movableKids)\n  }\n\n  setRoster(classroom.id, kids.map(row => row.name))\n  setStudentStatus(classroom.id, spinner.id, winner.name, \"Picked\")\n}\n\nconst heightForAngle = (angle, outerRadius) => {\n  const radians = angle / 360 * 2 * Math.PI\n\n  return outerRadius * Math.tan(radians)\n}\n\nconst renderKidName = (kid) => {\n  return `${kid.name}${kid.status === \"Suspended\" ? \".\" : \"\"}`\n}\n\nconst defaultWinner = \"nobody-at-all\"\n\nexport default props => {\n\n  const {\n    classroom,\n    spinner,\n    setRoster,\n    setStudentStatus = () => {},\n    resetSpinner = () => {},\n    setOpen\n  } = props\n\n  const [spin, setSpin] = useState(false);\n  const [winner, setWinner] = useState(defaultWinner)\n\n  const spinnerStatus = classroom.spinners[spinner.id] || {}\n\n  const kids = classroom.roster.map( (kid, i) => {\n    const row = { name : kid, color : i }\n    if (spinnerStatus[kid] !== undefined) {\n      row.status = spinnerStatus[kid]\n    }\n    else {\n      row.status = \"Available\"\n    }\n\n    return row\n  })\n\n  const { innerRadius = 20 } = props\n\n  const colors = availableSchemes[spinner.scheme || \"Set1\"]\n\n  // take the number of kids and divide by 360. That's what'll cover a kid.\n  // half of that will be the +/0 angle\n  const wedgeAngle = 360 / kids.length / 2\n\n  return (\n    <div className=\"spinner-container\">\n      <svg\n        viewBox={`0 0 550 500`}\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n          <clipPath id = \"circle\">\n            <circle cx = \"250\" cy = \"250\" r = \"245\" />\n          </clipPath>\n        </defs>\n        <g className={`spinner ${ spin ? \"spinning\" : \"\"}`} style={{transformOrigin : `250px 250px`}}>\n\n          <circle cx=\"250\" cy=\"250\" r=\"245\" fill = 'blue'/>\n          { kids.map((kid, i, kids) => {\n            const angle = i / kids.length * 360\n            return (\n              <g clipPath=\"url(#circle)\" key={kid.name + i}>\n                <g transform={`rotate(${angle}, 250, 250)`}>\n                  <path className=\"wedge\" d={`M250,250 l250,${heightForAngle(wedgeAngle, 250)} l0,${-2 * heightForAngle(wedgeAngle, 250)} Z`}\n                    fill={ kid.status !== \"Picked\" || kid.name === winner ? colors[kid.color % colors.length] : \"#444444\"}\n                    stroke={ kid.name === winner ? \"gold\" : \"black\"}\n                    strokeWidth={ kid.name === winner ? \"10\" : \"2\"}\n                    onClick= {\n                      () => {\n                        if (kid.name === winner) {\n                          setWinner(defaultWinner)\n                          setStudentStatus(classroom.id, spinner.id, kid.name, \"Available\")\n                        }\n                        else {\n                          setStudentStatus(classroom.id, spinner.id, kid.name, kid.status === \"Suspended\" ? \"Available\" : \"Suspended\")\n                        }\n                      }\n                    }/>\n\n                  <text\n                    x = \"475\"\n                    y = \"250\"\n                    textAnchor=\"end\"\n                    alignmentBaseline=\"middle\"\n                    fill={kid.status !== \"Picked\" || kid.name === winner  ? \"#FFFFFF\" : \"#666666\"}\n                    stroke={kid.status !== \"Picked\" || kid.name === winner  ? \"#333333\" : \"#000000\"}\n                    strokeWidth={1}>{renderKidName(kid)}</text>\n                </g>\n              </g>\n            )\n          })}\n          <circle cx=\"250\" cy=\"250\" r={innerRadius} fill = 'black'/>\n          <circle cx=\"250\" cy=\"250\" r=\"245\" stroke = 'black' fill=\"none\" strokeWidth=\"4\"/>\n        </g>\n        { props.canSpin && <path d=\"M480,250 L548,240 L548,260 Z\" className=\"spinner-pointer\" /> }\n      </svg>\n      { props.canSpin && <div className='spinner-actions'>\n        <Fab\n          label=\"Reset spinner\"\n          style={{ backgroundColor: 'var(--mdc-theme-error)' }}\n          onClick={() => {\n            if (spin === false) {\n              if (window.confirm(\"Really reset this spinner?\")) {\n                setWinner(defaultWinner)\n                resetSpinner(classroom.id, spinner.id)\n              }\n            }\n          }} />\n        <Fab\n          label=\"Spin the wheel\"\n          theme={['primaryBg']}\n          onClick={() => {\n            if (spin === false) {\n              setSpin(true);\n              //const newKids = [...kids]\n              //const lastKid = newKids.shift();\n              //newKids.push(lastKid)\n              setTimeout( () => pickWinner([...kids], classroom, spinner, setRoster, setStudentStatus, setWinner, resetSpinner), 1000)\n              setTimeout( () => setSpin(false), 1500)\n            }\n          }} />\n      { setOpen && <Fab\n          label=\"Close\"\n          onClick={() => {\n            if (spin === false) {\n              setOpen(false)\n            }\n          }} /> }\n      </div> }\n    </div>\n  )\n}\n","import React, { Fragment } from \"react\"\nimport { connect } from \"react-redux\"\nimport colorbrewer from \"colorbrewer\"\nimport { Select } from \"@rmwc/select\"\nimport { TextField } from \"@rmwc/textfield\"\nimport { IconButton } from \"@rmwc/icon-button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\n\nimport Spinner from \"./spinner\"\nimport \"styles/edit-spinner.css\"\n\nimport * as actions from \"actions\"\n\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst EditSpinner = props => {\n  const [open, setOpen] = React.useState(false)\n\n  const { spinner, setScheme, renameSpinner, deleteSpinner } = props\n\n  return (\n    <Fragment>\n      <Dialog\n        open={open}\n        onClose={evt => {\n          setOpen(false)\n          if (evt.detail.action === \"accept\") {\n            deleteSpinner(spinner.id)\n          }\n        }}\n      >\n        <DialogTitle>Delete spinner?</DialogTitle>\n        <DialogContent>Really delete {spinner.name}?</DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Delete\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <div className=\"spinner-editor\">\n        <div className=\"spinner\">\n          <Spinner\n            spinner={spinner}\n            classroom= {{\n              roster : [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n              spinners : {}\n            }}\n            canSpin={false}\n            outerRadius={100}\n          />\n        </div>\n        <div className=\"spinner-editor-inputs\">\n          <TextField\n            outlined\n            label=\"Spinner\"\n            value={spinner.name}\n            onChange={ e => renameSpinner(spinner.id, e.target.value) }\n          />\n          <Select\n            label=\"Color Scheme\"\n            outlined\n            value={spinner.scheme}\n            options={Object.keys(colorbrewer).filter(key => key !== \"schemeGroups\").sort()}\n            onChange={ (e) => setScheme(spinner.id, e.target.value) }\n          />\n        <IconButton icon=\"delete\" onClick={() => setOpen(true)}/>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    spinner : state.spinners[props.spinnerID]\n  }\n}\n\nexport default connect(mapStateToProps, actions)(EditSpinner)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { List, SimpleListItem, ListDivider } from \"@rmwc/list\"\nimport { Fab } from \"@rmwc/fab\"\n\nimport EditSpinner from \"./edit-spinner\"\n\nimport { addSpinner, selectSpinner } from \"actions\"\nimport { getSelectedSpinner } from \"selectors\"\n\nimport \"styles/edit-spinners.css\"\nimport '@material/list/dist/mdc.list.css';\n\nconst EditSpinners = (props) => {\n\n  const { spinners } = props\n\n  return (\n    <div className=\"edit-spinners-container\">\n\n      <div>\n        <Fab\n          label=\"Add Spinner\"\n          theme={['primaryBg']}\n          onClick={ props.addSpinner} />\n        <List>\n          <SimpleListItem text=\"Spinners\" disabled={true}/>\n          <ListDivider />\n          { Object.keys(spinners).sort().map( id => {\n            const spinner = spinners[id]\n            return <SimpleListItem\n              key={id}\n              text={spinner.name}\n              activated={spinner.selected}\n              onClick={ () => props.selectSpinner(id) }\n            />\n          })}\n        </List>\n      </div>\n\n      { props.selectedSpinner && <EditSpinner spinnerID={props.selectedSpinner.id} /> }\n\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  spinners : state.spinners,\n  selectedSpinner : getSelectedSpinner(state)\n})\n\nexport default connect(mapStateToProps, { addSpinner, selectSpinner })(EditSpinners)\n","import React from \"react\"\n\nimport {Card, CardPrimaryAction} from \"@rmwc/card\"\n\nimport Spinner from \"components/spinner\"\n\nimport '@material/card/dist/mdc.card.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css'\n\nimport \"styles/spinner-grid.css\"\n\nexport default (props) => {\n\n  const { spinners, selectSpinner } = props\n\n  return (\n    <div\n      className=\"classroom-grid\"\n    >\n      { Object.values(spinners).map(spinner => (\n        <Card outlined className=\"spinner-card\" key={spinner.id} >\n          <CardPrimaryAction onClick={() => {\n            selectSpinner(spinner.id)\n          }}>\n            <div className=\"spinner-card-content\">\n              <Spinner\n                spinner={ spinner }\n                classroom= {{\n                  roster : [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n                  spinners : {}\n                }}\n                canSpin={false}\n              />\n            <span className=\"spinner-name\">{ spinner.name }</span>\n            </div>\n          </CardPrimaryAction>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","import React, {Fragment} from \"react\"\nimport { connect } from \"react-redux\"\n\nimport { Dialog, DialogTitle, DialogContent } from \"@rmwc/dialog\"\n\nimport * as actions from \"actions\"\nimport { getSelectedClassroom, getSelectedSpinner } from \"selectors\"\n\nimport ClassroomSelector from \"./classroom-selector\"\nimport SpinnerGrid from \"./spinner-grid\"\nimport Spinner from \"./spinner\"\n\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/card/dist/mdc.card.css'\n\nimport \"styles/classroom.css\"\n\nconst Classroom = (props) => {\n  const {\n    classrooms,\n    selectedClassroom,\n    selectClassroom,\n    spinners,\n    selectedSpinner,\n    selectSpinner,\n    setRoster,\n    setStudentStatus,\n    resetSpinner\n  } = props\n\n  const [open, setOpen] = React.useState(selectedClassroom && selectedSpinner)\n\n  return (\n    <Fragment>\n      <div className=\"classroom-container\">\n\n        <div className=\"classroom-selector\">\n          <ClassroomSelector\n            classrooms={classrooms}\n            selectClassroom={selectClassroom}\n          />\n        </div>\n\n        <div className=\"spinner-selector\">\n          <SpinnerGrid\n            selectedClassroom={selectedClassroom}\n            spinners={spinners}\n            selectSpinner={( spinnerId ) => {\n              selectSpinner(spinnerId)\n              setOpen(true)\n            }}\n          />\n        </div>\n\n      </div>\n      { selectedSpinner && <Dialog\n        open={open}\n        onClose={evt => {\n          setOpen(false);\n        }}\n        modal = {true}\n        autoDetectWindowHeight={false}\n        autoScrollBodyContent={false}\n        className=\"spinner-dialog\"\n      >\n        <DialogTitle className=\"spinner-dialog-title\">\n          { selectedSpinner.name }\n        </DialogTitle>\n        <DialogContent>\n\n          <div className=\"active-spinner-card-content\">\n          <Spinner\n            classroom={selectedClassroom}\n            spinner={selectedSpinner}\n            canSpin={true}\n            setStudentStatus={setStudentStatus}\n            setRoster={setRoster}\n            outerRadius={600}\n            resetSpinner={resetSpinner}\n            setOpen={setOpen}\n          />\n          </div>\n\n        </DialogContent>\n\n      </Dialog> }\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n\n  return {\n    selectedClassroom : getSelectedClassroom(state),\n    classrooms : state.classrooms,\n    selectedSpinner : getSelectedSpinner(state),\n    spinners : state.spinners\n  }\n}\n\nexport default connect(mapStateToProps, actions)(Classroom)\n","import React from \"react\"\nimport { useHistory } from \"react-router\"\nimport { sortByClassroomName } from \"utils\"\n\nimport {Card, CardPrimaryAction} from \"@rmwc/card\"\n\nimport Spinner from \"components/spinner\"\n\nimport '@material/card/dist/mdc.card.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css'\n\nimport \"styles/classroom-grid.css\"\n\nexport default (props) => {\n\n  const { classrooms, selectSpinner, selectClassroom } = props\n\n  const history = useHistory()\n\n  return (\n    <div\n      className=\"classroom-grid\"\n    >\n      { Object.values(classrooms).sort(sortByClassroomName).map(classroom => (\n\n          <Card outlined className=\"classroom-card\">\n            <CardPrimaryAction onClick={() => {\n              selectSpinner(undefined)\n              selectClassroom(classroom.id)\n              history.push(\"/classroom\")\n            }}>\n              <div className=\"spinner-card-content\">\n                <Spinner\n                  spinner={ { scheme : \"Set1\" } }\n                  classroom= {{\n                    roster : [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n                    spinners : {}\n                  }}\n                  canSpin={false}\n                  outerRadius={100}\n                />\n                <span>{ classroom.name }</span>\n              </div>\n            </CardPrimaryAction>\n          </Card>\n      ))}\n    </div>\n  )\n}\n","import React, { Fragment, useState } from 'react';\n\nimport { SimpleTopAppBar, TopAppBarFixedAdjust } from \"@rmwc/top-app-bar\"\nimport { Drawer, DrawerHeader, DrawerTitle, DrawerSubtitle, DrawerContent } from \"@rmwc/drawer\"\nimport { List, ListItem, ListDivider } from \"@rmwc/list\"\nimport { Button } from \"@rmwc/button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\nimport { TextField } from \"@rmwc/textfield\"\n\n\nimport { Route, Switch } from \"react-router-dom\"\nimport { useHistory } from \"react-router\"\nimport { connect } from \"react-redux\"\n\nimport EditClassroom from \"./components/edit-classroom\"\nimport EditSpinners from \"./components/edit-spinners\"\nimport Classroom from \"./components/classroom\"\nimport ClassroomGrid from \"./components/classroom-grid\"\n\nimport * as actions from \"actions\"\n\nimport \"./App.css\"\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst App = props => {\n\n  const { serializedState, classrooms, selectClassroom, selectSpinner } = props\n\n  const [open, setOpen] = useState(false)\n  const [importOpen, setImportOpen] = React.useState(false)\n  const [temporaryState, setTemporaryState] = React.useState(undefined)\n\n  const history = useHistory()\n\n  return (\n    <Fragment>\n      <Dialog\n        open={importOpen}\n        onClose={evt => {\n          if (evt.detail.action === \"accept\") {\n            try {\n              if (JSON.parse(temporaryState.length ? temporaryState : \"{}\")) {\n                actions.initializeStore(temporaryState.length ? temporaryState : \"{}\")\n              }\n            }\n            catch(e) {\n              console.log(\"CANNOT IMPORT INVALID DATA : \", e)\n            }\n          }\n          else {\n            setTemporaryState(undefined)\n            setImportOpen(false)\n          }\n        }}\n      >\n        <DialogTitle>Import/Export data</DialogTitle>\n        <DialogContent>\n          <TextField\n            textarea\n            outlined\n            fullwidth\n            label=\"App Data\"\n            rows={8}\n            value={temporaryState !== undefined ? temporaryState : serializedState}\n            onChange={ e => setTemporaryState(e.target.value) }\n          />\n        </DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Update\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <SimpleTopAppBar\n        fixed\n        title=\"Classroom Spinner\"\n        navigationIcon={{ onClick: () => setOpen(!open) }}\n      />\n      <Drawer modal open={open} onClose={() => setOpen(false)}>\n        <DrawerHeader>\n          <DrawerTitle>Classroom Spinner</DrawerTitle>\n          <DrawerSubtitle>Choose your action</DrawerSubtitle>\n        </DrawerHeader>\n        <DrawerContent>\n          <List>\n            <ListItem className='centered-button-list-item'><Button label=\"Spin the wheel!\" raised\n              onClick={ () => {\n                setOpen(false)\n                history.push(\"/classroom\")\n              }\n            }/></ListItem>\n            <ListDivider />\n            <ListItem className='centered-button-list-item'><Button label=\"Edit classrooms\" raised\n              onClick={ () => {\n                setOpen(false)\n                history.push(\"/edit-classroom\")\n              }\n            }/></ListItem>\n          <ListItem className='centered-button-list-item'><Button label=\"Edit Spinners\" raised onClick={ () => { setOpen(false); history.push('/edit-spinners') } }/></ListItem>\n            <ListDivider />\n            <ListItem className='centered-button-list-item'><Button label=\"Import/Export data\" raised\n              onClick={ () => setImportOpen(true) }/></ListItem>\n          </List>\n        </DrawerContent>\n      </Drawer>\n      <TopAppBarFixedAdjust />\n      <Switch>\n        <Route exact path = \"/\">\n          <ClassroomGrid classrooms={classrooms} selectClassroom={selectClassroom} selectSpinner={selectSpinner} />\n        </Route>\n        <Route path = \"/classroom\">\n          <Classroom />\n        </Route>\n        <Route path = \"/edit-spinners\">\n          <EditSpinners />\n        </Route>\n        <Route path = \"/edit-classroom/:classroom_id?\">\n          <EditClassroom />\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n}\n\nconst mapStateToProps = state => ({\n  classrooms : state.classrooms,\n  spinners : state.spinners,\n  serializedState : JSON.stringify(state, undefined, 2)\n  //selectedSpinner : state.spinners[getSelectedSpinner(state)],\n  //selectedClassroom : state.classrooms[getSelectedClassroom(state)]\n})\n\nexport default connect(mapStateToProps, actions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_SPINNER,\n  SELECT_SPINNER,\n  RENAME_SPINNER,\n  SET_SCHEME,\n  DELETE_SPINNER\n} from \"actions\"\n\nconst INITIAL = {}\n\nexport default (state = INITIAL, action) => {\n  switch(action.type) {\n    case ADD_SPINNER : {\n      const { id } = action.payload\n      return {\n        ...state,\n        [id] : {\n          id,\n          name : \"New Spinner\",\n          scheme : \"Set1\",\n          selected : true\n        }\n      }\n    }\n    case SELECT_SPINNER : {\n      const { id : selectedID } = action.payload\n\n      return Object.entries(state).reduce( (newState, [id, spinner]) => {\n        if (selectedID === id && spinner.selected === false) {\n          newState[id] = { ...state[id], selected : true }\n        }\n        else if (selectedID !== id  && spinner.selected === true) {\n          newState[id] = { ...state[id], selected : false }\n        }\n        else {\n          newState[id] = spinner\n        }\n        return newState\n      }, {})\n    }\n    case RENAME_SPINNER : {\n      const { id, name } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], name }\n      }\n    }\n    case SET_SCHEME : {\n      const { id, scheme } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], scheme }\n      }\n    }\n    case DELETE_SPINNER : {\n      const {id} = action.payload\n      const nextSelectionIdx = Object.keys(state).sort().findIndex(spinnerId => spinnerId === id) - 1\n      const nextSelectionId = nextSelectionIdx > -1\n        ? Object.keys(state).sort()[nextSelectionIdx]\n        : Object.keys(state).sort()[1]\n      const newState = { ...state }\n      delete newState[id]\n      if (Object.keys(newState).length) {\n        newState[nextSelectionId] = { ...newState[nextSelectionId], selected : true }\n      }\n      return newState\n    }\n    default :\n      return state\n  }\n}\n","import {\n  ADD_CLASSROOM,\n  SELECT_CLASSROOM,\n  DELETE_CLASSROOM,\n  RENAME_CLASSROOM,\n  SET_ROSTER,\n  SET_STUDENT_STATUS,\n  DELETE_SPINNER,\n  RESET_SPINNER\n} from \"actions\"\n\nconst INITIAL = {}\n\nexport default (state = INITIAL, action) => {\n\n  switch(action.type) {\n    case ADD_CLASSROOM : {\n      const { id } = action.payload\n      return {\n        ...state,\n        [id] : {\n          id,\n          name : \"New Classroom\",\n          scheme : \"Set1\",\n          selected : true,\n          spinners : {},\n          roster : []\n        }\n      }\n    }\n    case SELECT_CLASSROOM : {\n      const { id : selectedID } = action.payload\n\n      return Object.entries(state).reduce( (newState, [id, classroom]) => {\n        if (selectedID === id && classroom.selected === false) {\n          newState[id] = { ...state[id], selected : true }\n        }\n        else if (selectedID !== id  && classroom.selected === true) {\n          newState[id] = { ...state[id], selected : false }\n        }\n        else {\n          newState[id] = classroom\n        }\n        return newState\n      }, {})\n    }\n    case RENAME_CLASSROOM : {\n      const { id, name } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], name }\n      }\n    }\n    case DELETE_CLASSROOM : {\n      const {id} = action.payload\n      const newState = { ...state }\n      delete newState[id]\n      return newState\n    }\n    case SET_ROSTER : {\n      const { id, roster } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], roster }\n      }\n    }\n    case SET_STUDENT_STATUS : {\n      const { id, spinnerId, studentName, status } = action.payload\n\n      const newState = {\n        ...state,\n        [id] : {\n          ...state[id],\n          spinners : {\n            ...state[id].spinners,\n            [spinnerId] : {\n              ...state[id].spinners[spinnerId],\n              [studentName] : status\n            }\n          }\n        }\n      }\n\n      const anyoneAvailable = Object.entries(newState[id].spinners[spinnerId]).some(([kid, status]) => status === \"Available\" && newState[id].roster.includes(kid))\n        || Object.values(newState[id].spinners[spinnerId]).length !== newState[id].roster.length\n      if (!anyoneAvailable) {\n        const oldStatuses = newState[id].spinners[spinnerId]\n        newState[id].spinners[spinnerId] = newState[id].roster.reduce( (newStatuses, studentName) => {\n          newStatuses[studentName] = oldStatuses[studentName] === \"Picked\"\n            ? \"Available\"\n            : oldStatuses[studentName]\n          return newStatuses\n        }, {})\n        newState[id].spinners[spinnerId][studentName] = status\n      }\n\n      return newState\n\n    }\n    case DELETE_SPINNER : {\n      const { id } = action.payload\n      return Object.keys(state).reduce( (newState, classroomId) => {\n        const classroom = state[classroomId]\n        newState[classroomId] = classroom\n        if (classroom.spinners[id] !== undefined) {\n          newState[classroomId] = {\n            ...classroom,\n            spinners : {\n              ...classroom.spinners\n            }\n          }\n          delete newState[classroomId].spinners[id]\n        }\n        return newState\n      }, {})\n    }\n    case RESET_SPINNER : {\n      const { id, spinnerId, resetSuspensions } = action.payload\n\n      const oldStatuses = state[id].spinners[spinnerId]\n\n      const newState = {\n        ...state,\n        [id] : {\n          ...state[id],\n          spinners : {\n            ...state[id].spinners,\n            [spinnerId] : state[id].roster.reduce( (newSpinners, studentName) => {\n              newSpinners[studentName] = resetSuspensions\n                ? \"Available\"\n                : oldStatuses[studentName] || \"Available\"\n              return newSpinners\n            }, {})\n          }\n        }\n      }\n\n      return newState\n\n    }\n    default :\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport spinners from \"./spinners\"\nimport classrooms from \"./classrooms\"\n\nexport default combineReducers({\n  spinners,\n  classrooms\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport \"../node_modules/material-components-web/dist/material-components-web.min.css\"\nimport \"material-icons/iconfont/material-icons.css\"\nimport \"../node_modules/@rmwc/list/collapsible-list.css\"\n\nimport reducers from './reducers';\nimport savingMiddleware from \"./saving-middleware\"\n\nconst preloadedState = localStorage.getItem('spinner')\n  ? JSON.parse(localStorage.getItem('spinner'))\n  : {}\n\nexport const store = createStore(\n  reducers,\n  preloadedState,\n  composeWithDevTools(applyMiddleware(reduxThunk, savingMiddleware))\n)\n  //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename=\"/\">\n      <App />\n    </Router>\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","  export default store => next => action => {\n    const result = next(action)\n    window.localStorage.spinner = JSON.stringify(store.getState())\n    return result\n  }\n"],"sourceRoot":""}