{"version":3,"sources":["actions/spinners.js","actions/classrooms.js","actions/index.js","selectors/spinners.js","selectors/classrooms.js","components/select-spinner.js","components/classroom-selector.js","components/spinner-details.js","components/edit-classroom.js","components/spinner.js","components/edit-spinner.js","components/edit-spinners.js","components/classroom.js","App.js","serviceWorker.js","reducers/spinners.js","reducers/classrooms.js","reducers/index.js","index.js","saving-middleware.js"],"names":["ADD_SPINNER","SELECT_SPINNER","RENAME_SPINNER","DELETE_SPINNER","SET_SCHEME","addSpinner","dispatch","id","pushid","type","payload","selectSpinner","renameSpinner","name","setScheme","scheme","deleteSpinner","ADD_CLASSROOM","DELETE_CLASSROOM","SELECT_CLASSROOM","RENAME_CLASSROOM","SET_ROSTER","SET_STUDENT_STATUS","addClassroom","a","selectClassroom","deleteClassroom","renameClassroom","setRoster","roster","setStudentStatus","spinnerId","studentName","status","INITIALIZE_STORE","initializeStore","json","window","localStorage","setItem","location","reload","getSelectedSpinner","createSelector","state","spinners","Object","values","find","spinner","selected","getSelectedClassroom","classrooms","room","SelectSpinner","props","selectedSpinnerId","keys","label","outlined","options","map","value","onChange","e","target","ClassroomSelector","classroom","selectedClassroomId","classroomId","console","log","spinnerStatus","rosterStatus","kid","row","undefined","stickyRows","key","updateStatus","connect","selectedClassroom","selectedSpinner","actions","React","useState","open","setOpen","onClose","evt","detail","action","isDefaultAction","className","icon","disabled","onClick","fullWidth","textarea","fullwidth","rows","join","split","availableSchemes","entries","colorbrewer","reduce","available","set","sort","pop","heightForAngle","angle","outerRadius","radians","Math","PI","tan","spin","setSpin","winner","setWinner","kids","i","color","innerRadius","margin","textOffset","colors","wedgeAngle","length","style","width","height","viewBox","transformOrigin","cx","cy","r","fill","clipPath","transform","d","stroke","strokeWidth","textAnchor","alignmentBaseline","canSpin","theme","setTimeout","lastWinner","winnableKids","filter","floor","random","kidIndex","findIndex","movableKids","splice","push","pickWinner","spinnerID","text","activated","serializedState","JSON","stringify","importOpen","setImportOpen","temporaryState","setTemporaryState","history","useHistory","parse","fixed","title","navigationIcon","modal","raised","exact","path","Boolean","hostname","match","INITIAL","combineReducers","selectedID","newState","nextSelectionIdx","nextSelectionId","anyoneAvailable","some","oldStatuses","newStatuses","preloadedState","getItem","store","createStore","reducers","composeWithDevTools","applyMiddleware","reduxThunk","next","result","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8b69527.chunk.js","sourcesContent":["import pushid from \"pushid\"\n\nexport const ADD_SPINNER = \"ADD_SPINNER\"\nexport const SELECT_SPINNER = \"SELECT_SPINNER\"\nexport const RENAME_SPINNER = \"RENAME_SPINNER\"\nexport const DELETE_SPINNER = \"DELETE_SPINNER\"\nexport const SET_SCHEME = \"SET_SCHEME\"\n\nexport function addSpinner() {\n  return dispatch => {\n    const id = pushid()\n    dispatch( { type : ADD_SPINNER, payload : { id } } )\n    dispatch( selectSpinner(id) )\n  }\n}\n\nexport function selectSpinner(id) {\n  return {\n    type : SELECT_SPINNER,\n    payload : { id }\n  }\n}\n\nexport function renameSpinner(id, name) {\n  return {\n    type : RENAME_SPINNER,\n    payload : { id, name }\n  }\n}\n\nexport function setScheme(id, scheme) {\n  return {\n    type : SET_SCHEME,\n    payload : { id, scheme }\n  }\n}\n\nexport function deleteSpinner(id) {\n  return {\n    type : DELETE_SPINNER,\n    payload : { id }\n  }\n}\n","import pushid from \"pushid\"\n\nexport const ADD_CLASSROOM = \"ADD_CLASSROOM\"\nexport const DELETE_CLASSROOM = \"DELETE_CLASSROOM\"\nexport const SELECT_CLASSROOM = \"SELECT_CLASSROOM\"\nexport const RENAME_CLASSROOM = \"RENAME_CLASSROOM\"\nexport const SET_ROSTER = \"SET_ROSTER\"\nexport const SET_STUDENT_STATUS = \"SET_STUDENT_STATUS\"\n\nexport const addClassroom = ( id = pushid() ) => {\n  return async dispatch => {\n    await dispatch( { type : ADD_CLASSROOM, payload : { id } } )\n    await dispatch( selectClassroom(id) )\n  }\n}\n\nexport const deleteClassroom = (id) => {\n  return {\n    type : DELETE_CLASSROOM,\n    payload : {id}\n  }\n}\n\nexport const selectClassroom = (id) => {\n  return {\n    type : SELECT_CLASSROOM,\n    payload : { id }\n  }\n}\n\nexport const renameClassroom = (id, name) => {\n  return {\n    type : RENAME_CLASSROOM,\n    payload : { id, name }\n  }\n}\n\nexport const setRoster = (id, roster) => {\n  return {\n    type : SET_ROSTER,\n    payload : { id, roster }\n  }\n}\n\nexport const setStudentStatus = (id, spinnerId, studentName, status) => {\n  return {\n    type : SET_STUDENT_STATUS,\n    payload : { id, spinnerId, studentName, status }\n  }\n}\n","export * from \"./spinners\"\nexport * from \"./classrooms\"\n\nexport const INITIALIZE_STORE = \"INITIALIZE_STORE\"\n\nexport const initializeStore = (json) => {\n  window.localStorage.setItem(\"spinner\", json)\n  window.location.reload()\n}\n","import { createSelector } from 'reselect';\n\nexport const getSpinners = (state) => state.spinners\n\nexport const getSelectedSpinner = createSelector(\n  [getSpinners],\n  spinners => {\n    return Object.values(spinners).find( spinner => spinner.selected )\n  }\n)\n","import { createSelector } from 'reselect';\n\nexport const getClassrooms = (state) => state.classrooms\n\nexport const getSelectedClassroom = createSelector(\n  [getClassrooms],\n  classrooms => {\n    return Object.values(classrooms).find( room => room.selected )\n  }\n)\n","import React from \"react\"\nimport { Select } from \"@rmwc/select\"\n\nimport '@material/select/dist/mdc.select.css';\n\nconst SelectSpinner = (props) => {\n\n  const selectedSpinnerId = Object.keys(props.spinners).find( spinnerId => props.spinners[spinnerId].selected === true)\n\n  return (<Select\n    label=\"Select spinner\"\n    outlined\n    options={ Object.values(props.spinners).map( spinner => ({ value : spinner.id, label : spinner.name }) ) }\n    value = { selectedSpinnerId }\n    onChange={ e => props.selectSpinner(e.target.value) }\n  />)\n}\n\nexport default SelectSpinner\n","import React from \"react\"\nimport { Select } from \"@rmwc/select\"\n\nimport '@material/select/dist/mdc.select.css';\n\nconst ClassroomSelector = (props) => {\n\n  const options = Object.values(props.classrooms).map( classroom => ({ value : classroom.id, label : classroom.name }) )\n  const selectedClassroomId = Object.keys(props.classrooms).find( classroomId => props.classrooms[classroomId].selected === true)\n\n  return (<Select\n    label=\"Select classroom\"\n    outlined\n    options={ options }\n    value = { selectedClassroomId }\n    onChange={ e => {\n      props.selectClassroom(e.target.value)\n    }}\n  />)\n}\n\nexport default ClassroomSelector\n","import React from \"react\"\n\nimport { DataTable, DataTableContent, DataTableHead, DataTableRow, DataTableHeadCell, DataTableBody, DataTableCell } from \"@rmwc/data-table\"\nimport { Select } from \"@rmwc/select\"\n\nimport '@material/select/dist/mdc.select.css';\nimport '@rmwc/data-table/data-table.css'\n\nexport default props => {\n\n  const { classroom, spinner } = props\nconsole.log(\"DETAIL PROPS : \", props)\n  const spinnerStatus = classroom.spinners[spinner.id] || {}\n  const rosterStatus = classroom.roster.map( kid => {\n    const row = { kid }\n    if (spinnerStatus[kid] !== undefined) {\n      row.status = spinnerStatus[kid]\n    }\n    else {\n      row.status = \"Available\"\n    }\n    return row\n  })\n\n  return (\n    <DataTable\n      stickyRows={1}\n      >\n      <DataTableContent>\n        <DataTableHead>\n          <DataTableRow>\n            <DataTableHeadCell>Student</DataTableHeadCell>\n            <DataTableHeadCell>\n              Status\n            </DataTableHeadCell>\n          </DataTableRow>\n        </DataTableHead>\n        <DataTableBody>\n          { rosterStatus.map( row =>\n            <DataTableRow key={row.kid}>\n              <DataTableCell>{ row.kid }</DataTableCell>\n              <DataTableCell>\n                <Select\n                  options={ [\"Available\", \"Picked\", \"Suspended\"] }\n                  value = { row.status }\n                  onChange={ e => props.updateStatus(classroom.id, spinner.id, row.kid, e.target.value) }\n                />\n              </DataTableCell>\n            </DataTableRow>\n          )}\n        </DataTableBody>\n      </DataTableContent>\n    </DataTable>\n  )\n}\n","import React, {Fragment} from \"react\"\nimport { connect } from \"react-redux\"\nimport { TextField } from \"@rmwc/textfield\"\nimport { IconButton } from \"@rmwc/icon-button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\n\nimport * as actions from \"actions\"\nimport { getSelectedClassroom, getSelectedSpinner } from \"selectors\"\n\nimport SelectSpinner from \"./select-spinner\"\nimport ClassroomSelector from \"./classroom-selector\"\nimport SpinnerDetails from \"./spinner-details\"\n\nimport \"styles/edit-classroom.css\"\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst EditClassroom = (props) => {\n  const {\n    classroom,\n    renameClassroom,\n    setRoster,\n    classrooms,\n    addClassroom,\n    deleteClassroom,\n    selectClassroom,\n    selectedClassroom = {},\n    spinners,\n    selectedSpinner,\n    selectSpinner,\n\n    setStudentStatus\n  } = props\n\n  const [open, setOpen] = React.useState(false)\n\n  console.log(\"EDIT CLASS : \", classroom, renameClassroom, setRoster, props, selectedClassroom)\n  return (\n    <Fragment>\n      <Dialog\n        open={open}\n        onClose={evt => {\n          setOpen(false)\n          if (evt.detail.action === \"accept\") {\n            deleteClassroom(selectedClassroom.id)\n          }\n        }}\n      >\n        <DialogTitle>Import/Export Data</DialogTitle>\n        <DialogContent>Really delete {selectedClassroom.name}?</DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Delete\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <div className=\"edit-classroom-container\">\n\n        <div className=\"classroom-selector\">\n          <span className='dropdown'><ClassroomSelector\n            classrooms={classrooms}\n            addClassroom={addClassroom}\n            selectClassroom={selectClassroom}\n          />\n          </span>\n          <span className='buttons'>\n            <IconButton\n              icon=\"remove_circle\"\n              disabled={ selectedClassroom.id === undefined }\n              onClick={() => setOpen(true)}\n            />\n            <IconButton icon=\"add_circle\" onClick={() => addClassroom()} />\n          </span>\n\n      </div>\n\n        <TextField\n          fullWidth\n          className=\"classroom-name\"\n          outlined\n          label=\"Classroom\"\n          value={selectedClassroom.name || \"\"}\n          onChange={ e => renameClassroom(selectedClassroom.id, e.target.value) }\n        />\n\n        <TextField\n          className=\"classroom-list\"\n          textarea\n          outlined\n          fullwidth\n          label=\"Students\"\n          rows={8}\n          value={(selectedClassroom.roster || []).join(\"\\n\")}\n          onChange={ e => setRoster(selectedClassroom.id, e.target.value.split(/\\r?\\n/)) }\n        />\n\n        <div className=\"spinner-selector\">\n          <SelectSpinner\n            spinners={spinners}\n            selectedSpinner={selectedSpinner}\n            selectSpinner={selectSpinner}/>\n        </div>\n        <div className=\"spinner-details\">\n          { selectedClassroom.id && selectedSpinner && <SpinnerDetails\n            classroom={selectedClassroom}\n            spinner={selectedSpinner}\n            updateStatus={setStudentStatus}\n          /> }\n        </div>\n\n      </div>\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n  console.log(\"SP : \", state, props, getSelectedSpinner(state));\n  return {\n    selectedClassroom : getSelectedClassroom(state),\n    classrooms : state.classrooms,\n    selectedSpinner : getSelectedSpinner(state),\n    spinners : state.spinners\n  }\n}\n\nexport default connect(mapStateToProps, actions)(EditClassroom)\n","import React, {useState} from \"react\"\nimport colorbrewer from \"colorbrewer\"\nimport {Fab} from \"@rmwc/fab\"\n\nimport \"styles/spinner.css\"\n\nconst availableSchemes = Object.entries(colorbrewer).reduce( (available, [key, set]) => {\n  if (key !== \"schemeGroups\") {\n    available[key] = set[Object.keys(set).sort().pop()]\n  }\n  return available\n}, {} )\n\nconst pickWinner = ( kids, classroom, spinner, setRoster, setStudentStatus, setWinner ) => {\n\n  const lastWinner = kids.find(kid => kid.winner)\n  if (lastWinner) {\n    setStudentStatus(classroom.id, spinner.id, lastWinner.name, \"Picked\")\n    lastWinner.status = \"Picked\";\n  }\n\n  const winnableKids = kids.filter( kid => kid.status === \"Available\" )\n\n  const winnerIndex = Math.floor(Math.random() * winnableKids.length)\n  const winner = winnableKids[winnerIndex]\n  const kidIndex = kids.findIndex(kid => kid === winner)\n  setWinner(winner.name)\n\n  if (kidIndex > 0) {\n    const movableKids = kids.splice(0, kidIndex)\n    kids.push(...movableKids)\n  }\n\n  setRoster(classroom.id, kids.map(row => row.name))\n  setStudentStatus(classroom.id, spinner.id, winner.name, \"Picked\")\n}\n\nconst heightForAngle = (angle, outerRadius) => {\n  const radians = angle / 360 * 2 * Math.PI\n\n  return outerRadius * Math.tan(radians)\n}\n\nexport default props => {\n\n  const { classroom, spinner, setRoster, setStudentStatus } = props\n\n  const [spin, setSpin] = useState(false);\n  const [winner, setWinner] = useState(\"nobody-at-all\")\n\n  const spinnerStatus = classroom.spinners[spinner.id] || {}\n\n  const kids = classroom.roster.map( (kid, i) => {\n    const row = { name : kid, color : i }\n    if (spinnerStatus[kid] !== undefined) {\n      row.status = spinnerStatus[kid]\n    }\n    else {\n      row.status = \"Available\"\n    }\n\n    return row\n  })\n\n  const { outerRadius = 400, innerRadius = 20, margin = 20 } = props\n\n  const textOffset = outerRadius - innerRadius - 10\n\n  const colors = availableSchemes[spinner.scheme || \"Set1\"]\n  const pointerPadding = 20\n\n  // take the number of kids and divide by 360. That's what'll cover a kid.\n  // half of that will be the +/0 angle\n  const wedgeAngle = 360 / kids.length / 2\n\n  return (\n    <div className=\"spinner-container\">\n      <svg\n        style={{width : \"70vmin\", height : \"70vmin\"}}\n        viewBox={`0 0 ${outerRadius * 2 + margin + pointerPadding} ${outerRadius * 2 + margin}`}>\n        <g className={`spinner ${ spin ? \"spinning\" : \"\"}`} style={{transformOrigin : `${outerRadius + margin / 2}px ${outerRadius + margin / 2}px`}}>\n          <clipPath id = \"circle\">\n            <circle cx={outerRadius + margin / 2} cy={outerRadius + margin / 2} r={outerRadius} fill = 'blue'/>\n          </clipPath>\n          <circle cx={outerRadius + margin / 2} cy={outerRadius + margin / 2} r={outerRadius} fill = 'blue'/>\n          { kids.map((kid, i, kids) => {\n            const angle = i / kids.length * 360\n            return (\n              <g clipPath=\"url(#circle)\" key={kid.name + i}>\n                <g transform={`translate(${outerRadius + innerRadius + textOffset + margin / 2}, ${outerRadius + margin / 2}) rotate(${angle}, -${innerRadius + textOffset}, 0)`}>\n                  <path className=\"wedge\" d={`M${-innerRadius - textOffset},0 l${outerRadius}, ${heightForAngle(wedgeAngle, outerRadius)} l0, ${-2 * heightForAngle(wedgeAngle, outerRadius)} Z`}\n                    fill={ kid.status !== \"Picked\" || kid.name === winner ? colors[kid.color % colors.length] : \"#444444\"}\n                    stroke={ kid.name === winner ? \"gold\" : \"black\"}\n                    strokeWidth={ kid.name === winner ? \"10\" : \"2\"} />\n\n                  <text textAnchor=\"end\" alignmentBaseline=\"middle\" fill={kid.status !== \"Picked\" || kid.name === winner  ? \"black\" : \"#666666\"}>{kid.name}</text>\n                </g>\n              </g>\n            )\n          })}\n          <circle cx={outerRadius + margin / 2} cy={outerRadius + margin / 2} r={innerRadius} fill = 'black'/>\n          <circle cx={outerRadius + margin / 2} cy={outerRadius + margin / 2} r={outerRadius} stroke = 'black' fill=\"none\" strokeWidth=\"4\"/>\n        </g>\n        { props.canSpin && <path d={`M${outerRadius * 2 + margin + pointerPadding - 2},${outerRadius + margin / 2} l0,-10 l-40,10 l40,10 Z`} className=\"spinner-pointer\" /> }\n      </svg>\n      { props.canSpin && <div>\n        <Fab\n          label=\"Spin the wheel\"\n          theme={['primaryBg']}\n          onClick={() => {\n            if (spin === false) {\n              setSpin(true);\n              //const newKids = [...kids]\n              //const lastKid = newKids.shift();\n              //newKids.push(lastKid)\n              setTimeout( () => pickWinner([...kids], classroom, spinner, setRoster, setStudentStatus, setWinner), 2000)\n              setTimeout( () => setSpin(false), 4000)\n            }\n          }} />\n      </div> }\n    </div>\n  )\n}\n","import React, { Fragment } from \"react\"\nimport { connect } from \"react-redux\"\nimport colorbrewer from \"colorbrewer\"\nimport { Select } from \"@rmwc/select\"\nimport { TextField } from \"@rmwc/textfield\"\nimport { IconButton } from \"@rmwc/icon-button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\n\nimport Spinner from \"./spinner\"\nimport \"styles/edit-spinner.css\"\n\nimport * as actions from \"actions\"\n\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst EditSpinner = props => {\n  const [open, setOpen] = React.useState(false)\n\n  const { spinner, setScheme, renameSpinner, deleteSpinner } = props\n\n  return (\n    <Fragment>\n      <Dialog\n        open={open}\n        onClose={evt => {\n          setOpen(false)\n          if (evt.detail.action === \"accept\") {\n            deleteSpinner(spinner.id)\n          }\n        }}\n      >\n        <DialogTitle>Delete spinner?</DialogTitle>\n        <DialogContent>Really delete {spinner.name}?</DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Delete\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <div className=\"spinner-editor\">\n        <div className=\"spinner\">\n          <Spinner\n            spinner={spinner}\n            classroom= {{\n              roster : [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n              spinners : {}\n            }}\n            canSpin={false}\n            outerRadius={100}\n          />\n        </div>\n        <div className=\"spinner-editor-inputs\">\n          <TextField\n            outlined\n            label=\"Spinner\"\n            value={spinner.name}\n            onChange={ e => renameSpinner(spinner.id, e.target.value) }\n          />\n          <Select\n            label=\"Color Scheme\"\n            outlined\n            value={spinner.scheme}\n            options={Object.keys(colorbrewer).filter(key => key !== \"schemeGroups\").sort()}\n            onChange={ (e) => setScheme(spinner.id, e.target.value) }\n          />\n        <IconButton icon=\"delete\" onClick={() => setOpen(true)}/>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    spinner : state.spinners[props.spinnerID]\n  }\n}\n\nexport default connect(mapStateToProps, actions)(EditSpinner)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { List, SimpleListItem, ListDivider } from \"@rmwc/list\"\nimport { Fab } from \"@rmwc/fab\"\n\nimport EditSpinner from \"./edit-spinner\"\n\nimport { addSpinner, selectSpinner } from \"actions\"\nimport { getSelectedSpinner } from \"selectors\"\n\nimport \"styles/edit-spinners.css\"\nimport '@material/list/dist/mdc.list.css';\n\nconst EditSpinners = (props) => {\n\n  const { spinners } = props\n\n  return (\n    <div className=\"edit-spinners-container\">\n\n      <div>\n        <List>\n          <SimpleListItem text=\"Spinners\" disabled={true}/>\n          <ListDivider />\n          { Object.keys(spinners).sort().map( id => {\n            const spinner = spinners[id]\n            return <SimpleListItem\n              key={id}\n              text={spinner.name}\n              activated={spinner.selected}\n              onClick={ () => props.selectSpinner(id) }\n            />\n          })}\n        </List>\n\n        <Fab\n          label=\"Add Spinner\"\n          theme={['primaryBg']}\n          onClick={ props.addSpinner} />\n      </div>\n\n      { props.selectedSpinner && <EditSpinner spinnerID={props.selectedSpinner.id} /> }\n\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  spinners : state.spinners,\n  selectedSpinner : getSelectedSpinner(state)\n})\n\nexport default connect(mapStateToProps, { addSpinner, selectSpinner })(EditSpinners)\n","import React, {Fragment} from \"react\"\nimport { connect } from \"react-redux\"\n\nimport * as actions from \"actions\"\nimport { getSelectedClassroom, getSelectedSpinner } from \"selectors\"\n\nimport SelectSpinner from \"./select-spinner\"\nimport ClassroomSelector from \"./classroom-selector\"\nimport Spinner from \"./spinner\"\n\nimport \"styles/classroom.css\"\n\nconst Classroom = (props) => {\n  const {\n    classrooms,\n    selectedClassroom,\n    selectClassroom,\n    spinners,\n    selectedSpinner,\n    selectSpinner,\n    setRoster,\n    setStudentStatus\n  } = props\nconsole.log(\"SEL : \", selectedClassroom, selectedSpinner)\n  return (\n    <Fragment>\n      <div className=\"classroom-container\">\n\n        <div className=\"classroom-selector\">\n          <ClassroomSelector\n            classrooms={classrooms}\n            selectClassroom={selectClassroom}\n          />\n        </div>\n\n        <div className=\"spinner-selector\">\n          <SelectSpinner\n            spinners={spinners}\n            selectSpinner={selectSpinner}/>\n        </div>\n\n        <div className=\"spinner\">\n          { selectedClassroom && selectedSpinner && <Spinner\n            classroom={selectedClassroom}\n            spinner={selectedSpinner}\n            canSpin={true}\n            setStudentStatus={setStudentStatus}\n            setRoster={setRoster}\n          />}\n        </div>\n\n      </div>\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => {\n\n  return {\n    selectedClassroom : getSelectedClassroom(state),\n    classrooms : state.classrooms,\n    selectedSpinner : getSelectedSpinner(state),\n    spinners : state.spinners\n  }\n}\n\nexport default connect(mapStateToProps, actions)(Classroom)\n","import React, { Fragment, useState } from 'react';\n\nimport { SimpleTopAppBar, TopAppBarFixedAdjust } from \"@rmwc/top-app-bar\"\nimport { Drawer, DrawerHeader, DrawerTitle, DrawerSubtitle, DrawerContent } from \"@rmwc/drawer\"\nimport { List, ListItem, ListDivider } from \"@rmwc/list\"\nimport { Button } from \"@rmwc/button\"\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from \"@rmwc/dialog\"\nimport { TextField } from \"@rmwc/textfield\"\n\n\nimport { Route, Switch } from \"react-router-dom\"\nimport { useHistory } from \"react-router\"\nimport { connect } from \"react-redux\"\n\nimport EditClassroom from \"./components/edit-classroom\"\nimport EditSpinners from \"./components/edit-spinners\"\nimport Classroom from \"./components/classroom\"\nimport Spinner from \"./components/spinner\"\n\nimport * as actions from \"actions\"\n\nimport \"./App.css\"\nimport '@material/dialog/dist/mdc.dialog.css'\nimport '@material/button/dist/mdc.button.css'\nimport '@material/icon-button/dist/mdc.icon-button.css';\n\nconst App = props => {\n\n  const { serializedState } = props\n\n  const [open, setOpen] = useState(false)\n  const [importOpen, setImportOpen] = React.useState(false)\n  const [temporaryState, setTemporaryState] = React.useState(serializedState)\n\n  const history = useHistory()\n\n  return (\n    <Fragment>\n      <Dialog\n        open={importOpen}\n        onClose={evt => {\n          if (evt.detail.action === \"accept\") {\n            try {\n              console.log(\"A\")\n              if (JSON.parse(temporaryState.length ? temporaryState : \"{}\")) {\nconsole.log(\"B\")\n                actions.initializeStore(temporaryState.length ? temporaryState : undefined)\n              }\n            }\n            catch(e) {\n              console.log(\"CANNOT IMPORT INVALID DATA : \", e)\n            }\n          }\n          else {\n            setTemporaryState(serializedState)\n            setImportOpen(false)\n          }\n        }}\n      >\n        <DialogTitle>Import/Export data</DialogTitle>\n        <DialogContent>\n          <TextField\n            textarea\n            outlined\n            fullwidth\n            label=\"App Data\"\n            rows={8}\n            value={temporaryState}\n            onChange={ e => setTemporaryState(e.target.value) }\n          />\n        </DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Update\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n      <SimpleTopAppBar\n        fixed\n        title=\"Classroom Spinner\"\n        navigationIcon={{ onClick: () => setOpen(!open) }}\n      />\n      <Drawer modal open={open} onClose={() => setOpen(false)}>\n        <DrawerHeader>\n          <DrawerTitle>Classroom Spinner</DrawerTitle>\n          <DrawerSubtitle>Choose your action</DrawerSubtitle>\n        </DrawerHeader>\n        <DrawerContent>\n          <List>\n            <ListItem className='centered-button-list-item'><Button label=\"Spin the wheel!\" raised\n              onClick={ () => {\n                setOpen(false)\n                history.push(\"/classroom\")\n              }\n            }/></ListItem>\n            <ListDivider />\n            <ListItem className='centered-button-list-item'><Button label=\"Edit classrooms\" raised\n              onClick={ () => {\n                setOpen(false)\n                history.push(\"/edit-classroom\")\n              }\n            }/></ListItem>\n            <ListItem className='centered-button-list-item'><Button label=\"Edit Spinners\" raised onClick={ () => { setOpen(false); history.push('/edit-spinners') } }/></ListItem>\n            <ListDivider />\n            <ListItem className='centered-button-list-item'><Button label=\"Import/Export data\" raised\n              onClick={ () => setImportOpen(true) }/></ListItem>\n          </List>\n        </DrawerContent>\n      </Drawer>\n      <TopAppBarFixedAdjust />\n      <Switch>\n        <Route exact path = \"/\">\n          <div className=\"welcome-container\">\n            <div>Welcome to the classroom spinner!</div>\n            <div className=\"spinner\">\n              <Spinner\n                spinner={ { scheme : \"Set1\" } }\n                classroom= {{\n                  roster : [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n                  spinners : {}\n                }}\n                canSpin={false}\n                outerRadius={100}\n              />\n            </div>\n            <div>\n              <Button label=\"Spin the wheel!\" raised\n                onClick={ () => {\n                  setOpen(false)\n                  history.push(\"/classroom\")\n                }\n              }/>\n            </div>\n          </div>\n        </Route>\n        <Route path = \"/classroom\">\n          <Classroom />\n        </Route>\n        <Route path = \"/edit-spinners\">\n          <EditSpinners />\n        </Route>\n        <Route path = \"/edit-classroom/:classroom_id?\">\n          <EditClassroom />\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n}\n\nconst mapStateToProps = state => ({\n  classrooms : state.classrooms,\n  spinners : state.spinners,\n  serializedState : JSON.stringify(state, undefined, 2)\n  //selectedSpinner : state.spinners[getSelectedSpinner(state)],\n  //selectedClassroom : state.classrooms[getSelectedClassroom(state)]\n})\n\nexport default connect(mapStateToProps, actions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_SPINNER,\n  SELECT_SPINNER,\n  RENAME_SPINNER,\n  SET_SCHEME,\n  DELETE_SPINNER\n} from \"actions\"\n\nconst INITIAL = {}\n\nexport default (state = INITIAL, action) => {\n  switch(action.type) {\n    case ADD_SPINNER : {\n      const { id } = action.payload\n      return {\n        ...state,\n        [id] : {\n          id,\n          name : \"New Spinner\",\n          scheme : \"Set1\",\n          selected : true\n        }\n      }\n    }\n    case SELECT_SPINNER : {\n      const { id : selectedID } = action.payload\n\n      return Object.entries(state).reduce( (newState, [id, spinner]) => {\n        if (selectedID === id && spinner.selected === false) {\n          newState[id] = { ...state[id], selected : true }\n        }\n        else if (selectedID !== id  && spinner.selected === true) {\n          newState[id] = { ...state[id], selected : false }\n        }\n        else {\n          newState[id] = spinner\n        }\n        return newState\n      }, {})\n    }\n    case RENAME_SPINNER : {\n      const { id, name } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], name }\n      }\n    }\n    case SET_SCHEME : {\n      const { id, scheme } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], scheme }\n      }\n    }\n    case DELETE_SPINNER : {\n      const {id} = action.payload\n      const nextSelectionIdx = Object.keys(state).sort().findIndex(spinnerId => spinnerId === id) - 1\n      const nextSelectionId = nextSelectionIdx > -1\n        ? Object.keys(state).sort()[nextSelectionIdx]\n        : Object.keys(state).sort()[1]\n      const newState = { ...state }\n      delete newState[id]\n      if (Object.keys(newState).length) {\n        newState[nextSelectionId] = { ...newState[nextSelectionId], selected : true }\n      }\n      return newState\n    }\n    default :\n      return state\n  }\n}\n","import {\n  ADD_CLASSROOM,\n  SELECT_CLASSROOM,\n  DELETE_CLASSROOM,\n  RENAME_CLASSROOM,\n  SET_ROSTER,\n  SET_STUDENT_STATUS,\n  DELETE_SPINNER\n} from \"actions\"\n\nconst INITIAL = {}\n\nexport default (state = INITIAL, action) => {\n\n  switch(action.type) {\n    case ADD_CLASSROOM : {\n      const { id } = action.payload\n      return {\n        ...state,\n        [id] : {\n          id,\n          name : \"New Classroom\",\n          scheme : \"Set1\",\n          selected : true,\n          spinners : {},\n          roster : []\n        }\n      }\n    }\n    case SELECT_CLASSROOM : {\n      const { id : selectedID } = action.payload\n\n      return Object.entries(state).reduce( (newState, [id, classroom]) => {\n        if (selectedID === id && classroom.selected === false) {\n          newState[id] = { ...state[id], selected : true }\n        }\n        else if (selectedID !== id  && classroom.selected === true) {\n          newState[id] = { ...state[id], selected : false }\n        }\n        else {\n          newState[id] = classroom\n        }\n        return newState\n      }, {})\n    }\n    case RENAME_CLASSROOM : {\n      const { id, name } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], name }\n      }\n    }\n    case DELETE_CLASSROOM : {\n      const {id} = action.payload\n      const newState = { ...state }\n      delete newState[id]\n      return newState\n    }\n    case SET_ROSTER : {\n      const { id, roster } = action.payload\n      return {\n        ...state,\n        [id] : { ...state[id], roster }\n      }\n    }\n    case SET_STUDENT_STATUS : {\n      const { id, spinnerId, studentName, status } = action.payload\n\n      const newState = {\n        ...state,\n        [id] : {\n          ...state[id],\n          spinners : {\n            ...state[id].spinners,\n            [spinnerId] : {\n              ...state[id].spinners[spinnerId],\n              [studentName] : status\n            }\n          }\n        }\n      }\n\n      const anyoneAvailable = Object.values(newState[id].spinners[spinnerId]).some(status => status === \"Available\")\n        || Object.values(newState[id].spinners[spinnerId]).length !== newState[id].roster.length\n      if (!anyoneAvailable) {\n        const oldStatuses = newState[id].spinners[spinnerId]\n        newState[id].spinners[spinnerId] = Object.keys(oldStatuses).reduce( (newStatuses, studentName) => {\n          newStatuses[studentName] = oldStatuses[studentName] === \"Picked\"\n            ? \"Available\"\n            : oldStatuses[studentName]\n          return newStatuses\n        }, {})\n        newState[id].spinners[spinnerId][studentName] = status\n      }\n\n      return newState\n\n    }\n    case DELETE_SPINNER : {\n      const { id } = action.payload\n      return Object.keys(state).reduce( (newState, classroomId) => {\n        const classroom = state[classroomId]\n        newState[classroomId] = classroom\n        if (classroom.spinners[id] !== undefined) {\n          newState[classroomId] = {\n            ...classroom,\n            spinners : {\n              ...classroom.spinners\n            }\n          }\n          delete newState[classroomId].spinners[id]\n        }\n        return newState\n      }, {})\n    }\n    default :\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport spinners from \"./spinners\"\nimport classrooms from \"./classrooms\"\n\nexport default combineReducers({\n  spinners,\n  classrooms\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport \"../node_modules/material-components-web/dist/material-components-web.min.css\"\nimport \"material-icons/iconfont/material-icons.css\"\nimport \"../node_modules/@rmwc/list/collapsible-list.css\"\n\nimport reducers from './reducers';\nimport savingMiddleware from \"./saving-middleware\"\n\nconst preloadedState = localStorage.getItem('spinner')\n  ? JSON.parse(localStorage.getItem('spinner'))\n  : {}\n\nexport const store = createStore(\n  reducers,\n  preloadedState,\n  composeWithDevTools(applyMiddleware(reduxThunk, savingMiddleware))\n)\n  //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","  export default store => next => action => {\n    const result = next(action)\nconsole.log(\"RES : \", result)\n    window.localStorage.spinner = JSON.stringify(store.getState())\nconsole.log(\"SAVED : \", store.getState())\n    return result\n  }\n"],"sourceRoot":""}